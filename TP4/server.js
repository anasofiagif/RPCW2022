var http = require('http')
var axios = require('axios')
var fs = require('fs')
var static = require('./static.js')

var {parse} = require('querystring')

function initPage(){
    let html = `
      <html>
          <head>
              <title>Tasks</title>
              <meta charset="utf-8"/>
              <link rel="stylesheet" href="w3.css"/>
          </head>
          <script>
            function updateTask() {
                console.log("ai")
            }
          </script>
          <body>
    `
    return html
}

function endPage(d){
    let html =  `
            </div>
            <footer class="w3-container w3-teal">
                <address>Generated by todoServer (${d})</address>
            </footer>
        </body>
    </html>
    `

    return html
}


function buildTasks(tasks, type){
    let html = `
        <div class="w3-container w3-cell">
            <div class="w3-container w3-teal">
                <h2>${type}</h2>
            </div>
    `

    tasks.forEach(t => {
        html += `
            <div class="w3-panel w3-border w3-round">
                <h3>${t.what}</h1>
                <p>Author: ${t.who}</p>
                <p>Created: ${t.created}</p>
                <p>Deadline: ${t.deadline}</p>`
        
        if(type == "To-Do"){
            html += `
                <button class="w3-btn w3-blue-grey w3-right">âœ”</button>
                <br><br>
            `
        }
                
            html += '</div>'
        
    })

    html += '</div>'

    return html
}

function form(){
    
    let html = `
        <div class="w3-container w3-teal">
            <h2>Add Task</h2>
        </div>

        <form class="w3-container" action="/" method="POST">
            <label class="w3-text-teal"><b>Date</b></label>
            <input class="w3-input w3-border w3-light-grey" type="text" name="created">

            <label class="w3-text-teal"><b>Deadline</b></label>
            <input class="w3-input w3-border w3-light-grey" type="text" name="deadline">

            <label class="w3-text-teal"><b>Author</b></label>
            <input class="w3-input w3-border w3-light-grey" type="text" name="who">

            <label class="w3-text-teal"><b>Task name</b></label>
            <input class="w3-input w3-border w3-light-grey" type="text" name="what">

            <label class="w3-text-teal"><b>Type</b></label>
            <input class="w3-input w3-border w3-light-grey" type="text" name="type">

            <br>

            <input class="w3-btn w3-blue-grey" type="submit" value="Submit"/>
            <input class="w3-btn w3-blue-grey" type="reset" value="Clean"/> 
        </form>
        <div class="w3-cell-row">
    `   
    return html
}

function submissionMessage(d){

    return `
    <html>
        <head>
            <title>Sucess</title>
            <meta charset="utf-8"/>
            <link rel="icon" href="favicon.png"/>
            <link rel="stylesheet" href="w3.css"/>
        </head>
        <body>
            <div class="w3-card-4">
            <header class="w3-container w3-teal">
                <h1>New task inserted successfully!</h1>
            </header>

            <div class="w3-container">
                <p><a href="/">Check out the new task in your to-do list :)</a></p>
            </div>
            <footer class="w3-container w3-teal">
                <address>Generated by todoServer (${d})</address>
            </footer>
        </body>
</html>
`
}

function getInfo(request, callback){
    if(request.headers['content-type'] == 'application/x-www-form-urlencoded'){
        let body = ""
        request.on('data', bloco => {
            body += bloco.toString()
        })
        request.on('end', () =>{
            console.log(body)
            callback(parse(body))
        })
    }
}

/*
function updateTask(task){

}
*/

var todoServer = http.createServer(function (req, res) {
    

    var d = new Date().toISOString().substring(0, 16)
    console.log(req.method + " " + req.url + " " + d)

    if(static.recursoEstatico(req)){
        static.sirvoRecursoEstatico(req, res)
    }
    else {

        switch(req.method){
            case "GET": 
                if(req.url == "/"){
                    res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'})
                    res.write(initPage())
                    res.write(form())
                    axios.all([
                        axios.get("http://localhost:4444/tasks?type=todo"),
                        axios.get("http://localhost:4444/tasks?type=complete")
                    ])
                        .then(
                            axios.spread((g1, g2) => {
                                var todo = g1.data
                                var complete = g2.data
                                res.write(buildTasks(todo, "To-Do"))
                                res.write(buildTasks(complete, "Complete"))
                                res.write(endPage(d))
                                res.end()
                            })
                        )
                        .catch(function(erro){
                            res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'})
                            res.write("<p>I'm sorry, but I wasn't able to get your tasks :(</p>")
                            res.end()
                        })
                        
                }
                else{
                    res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'})
                    res.write("<p>" + req.method + " " + req.url + " isn't available :/</p>")
                    res.end()
                }
                break
            case "POST":
                if(req.url == '/'){
                    getInfo(req, resultado => {
                        console.log('POST de aluno: ' + JSON.stringify(resultado))
                        axios.post("http://localhost:4444/tasks", resultado)
                            .then(resp => {
                                console.log(resp)
                                res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'})
                                res.write(submissionMessage(d))
                                console.log(resp.data)
                                res.end()
                            })
                            .catch(erro => {
                                res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'})
                                res.write('<p>Error in the POST: ' + erro + '</p>')
                                res.end('<p><a href="/">Back</a></p>')
                            })

                    })

                }
                else{
                    res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'})
                    res.write('<p>Incompatible POST</p>')
                    res.end('<p><a href="/">Back</a></p>')
                }
                break
            default: 
                res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'})
                res.write("<p>" + req.method + " does not support this service.</p>")
                res.end()
        }

    }

})

todoServer.listen(1441)
console.log('Server listening on port 1441...')